{"version":3,"sources":["webpack:///webpack/bootstrap 2acb8d1589bdd700a16e","webpack:///./src/background.js","webpack:///external \"path\"","webpack:///external \"url\"","webpack:///external \"electron\"","webpack:///./config/env_test.json"],"names":["env","name","userDataPath","app","getPath","setPath","on","mainWindow","BrowserWindow","width","height","loadURL","url","format","pathname","path","join","__dirname","protocol","slashes","openDevTools","quit"],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;ACxDA;;AACA;;AACA;;AAIA;;;;AAXA;AACA;AACA;AACA;AAMA;AACA;AAIA;AACA;AACA;AACA,IAAIA,aAAIC,IAAJ,KAAa,YAAjB,EAA+B;AAC7B,QAAMC,eAAeC,cAAIC,OAAJ,CAAY,UAAZ,CAArB;;AACAD,gBAAIE,OAAJ,CAAY,UAAZ,EAAyB,GAAEH,YAAa,KAAIF,aAAIC,IAAK,GAArD;AACD;;AAEDE,cAAIG,EAAJ,CAAO,OAAP,EAAgB,MAAM;AACpB,QAAMC,aAAa,IAAIC,uBAAJ,CAAkB;AACnCC,WAAO,GAD4B;AAEnCC,YAAQ;AAF2B,GAAlB,CAAnB;AAMAH,aAAWI,OAAX,CACEC,aAAIC,MAAJ,CAAW;AACTC,cAAUC,cAAKC,IAAL,CAAUC,SAAV,EAAqB,UAArB,CADD;AAETC,cAAU,OAFD;AAGTC,aAAS;AAHA,GAAX,CADF;;AAQA,MAAInB,aAAIC,IAAJ,KAAa,aAAjB,EAAgC;AAC9BM,eAAWa,YAAX;AACD;AACF,CAlBD;;AAoBAjB,cAAIG,EAAJ,CAAO,mBAAP,EAA4B,MAAM;AAChCH,gBAAIkB,IAAJ;AACD,CAFD,E;;;;;;AC1CA,iC;;;;;;ACAA,gC;;;;;;ACAA,qC;;;;;;ACAA,kBAAkB,gF","file":"background.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 2acb8d1589bdd700a16e","// This is main process of Electron, started as first thing when your\n// app starts. It runs through entire life of your application.\n// It doesn't have any windows which you can see on screen, but we can open\n// window from here.\n\nimport path from \"path\";\nimport url from \"url\";\nimport { app, BrowserWindow } from \"electron\";\n\n// Special module holding environment variables which you declared\n// in config/env_xxx.json file.\nimport env from \"env\";\n\n\n// Save userData in separate folders for each environment.\n// Thanks to this you can use production and development versions of the app\n// on same machine like those are two separate apps.\nif (env.name !== \"production\") {\n  const userDataPath = app.getPath(\"userData\");\n  app.setPath(\"userData\", `${userDataPath} (${env.name})`);\n}\n\napp.on(\"ready\", () => {\n  const mainWindow = new BrowserWindow({\n    width: 800,\n    height: 600\n  });\n\n  \n  mainWindow.loadURL(\n    url.format({\n      pathname: path.join(__dirname, \"app.html\"),\n      protocol: \"file:\",\n      slashes: true\n    })\n  );\n\n  if (env.name === \"development\") {\n    mainWindow.openDevTools();\n  }\n});\n\napp.on(\"window-all-closed\", () => {\n  app.quit();\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/background.js","module.exports = require(\"path\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"path\"\n// module id = 1\n// module chunks = 1","module.exports = require(\"url\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"url\"\n// module id = 2\n// module chunks = 1","module.exports = require(\"electron\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"electron\"\n// module id = 3\n// module chunks = 1","module.exports = {\"name\":\"test\",\"description\":\"Add here any environment specific stuff you like.\"}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./config/env_test.json\n// module id = 4\n// module chunks = 1"],"sourceRoot":""}